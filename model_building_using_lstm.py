# -*- coding: utf-8 -*-
"""Model building using LSTM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ba8IoYdn3UNT23M8gnjWaDMtoup-4psK

# Problem Statement
- Design RNN or its variant including LSTM or GRU

    > a) Select a suitable time series dataset. Example â€“ predict sentiments based on product reviews.

    > b) Apply for prediction

## Import Dataset
"""

from tensorflow.keras.datasets.imdb import load_data

(x_train, y_train), (x_test, y_test) = load_data(num_words=5000)

x_train.shape, y_train.shape, x_test.shape, y_test.shape

"""### Exploring Dataset (Optional)"""

from tensorflow.keras.datasets.imdb import get_word_index

word_indices = get_word_index()
word_indices = {val:key for key, val in word_indices.items()}

for word in x_train[1]:
    # print(word)
    if word >= 3:
        print(word_indices.get(word - 3, 0), end=' ')
    elif word != 1:
        print('?', end=' ')  # special tokens

"""## Preprocessing"""

from tensorflow.keras.preprocessing.sequence import pad_sequences

padded_x_train = pad_sequences(x_train, maxlen = 400)
padded_x_test = pad_sequences(x_test, maxlen = 400)

padded_x_train[1]

"""## Convert Text to Embedding Vector"""

from tensorflow.keras.layers import Embedding
from tensorflow.keras.models import Sequential

embedding_model = Sequential(
    [
        Embedding(input_dim=2000, output_dim=128)
    ]
)

embedding_x_train = embedding_model(padded_x_train)
embedding_x_test = embedding_model(padded_x_test)

"""## Building LSTM model"""

from tensorflow.keras.layers import LSTM, Dense

lstm_model = Sequential([
    LSTM(128),
    Dense(1,activation='sigmoid')
])

lstm_model.compile(
    loss='binary_crossentropy',
    metrics = ['accuracy'],
    optimizer= 'adam'
)

lstm_model.fit(embedding_x_train, y_train, batch_size=64,
                   epochs=10,
                   validation_split=0.2)

test_loss, test_acc = lstm_model.evaluate(embedding_x_test, y_test, verbose=0)
print(f"Test Accuracy: {test_acc * 100:.2f}%")

y_pred = lstm_model.predict(embedding_x_test)
y_pred

