# -*- coding: utf-8 -*-
"""Network_graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eAOL-dm-WijliI8kBry_k2ulQEl2J3Zx
"""

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, Dense

# Load data
nodes = pd.read_csv('nodes.csv')
edges = pd.read_csv('edges.csv')
labels = pd.read_csv('labels.csv')

# Merge labels with node info
data = pd.merge(nodes, labels, on='user_id')

# Build graph
G = nx.Graph()
G.add_nodes_from(data['user_id'])
G.add_edges_from(edges[['user_id1', 'user_id2']].values)

# Draw colored subgraph
nodes = data['user_id'][:200]
colors = data[data['user_id'].isin(nodes)]['label'].map({0: 'red', 1: 'green'})

nx.draw(G.subgraph(nodes), node_color=colors, node_size=40, with_labels=False)

plt.show()


# Prepare text data
tokenizer = Tokenizer(num_words=2000, oov_token='<OOV>')
tokenizer.fit_on_texts(data['text'])

X = pad_sequences(tokenizer.texts_to_sequences(data['text']), maxlen=15)
y = data['label'].values

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# RNN model
model = Sequential([
    Embedding(2000, 32, input_length=15),
    SimpleRNN(32),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=5, validation_split=0.2)

# Evaluate
loss, acc = model.evaluate(X_test, y_test)
print(f"\nTest Accuracy: {acc*100:.2f}%")

# Prediction function
def predict_sentiment(text):
    seq = tokenizer.texts_to_sequences([text])
    padded = pad_sequences(seq, maxlen=15)
    pred = model.predict(padded)[0][0]
    return 'Positive' if pred > 0.5 else 'Negative'

def show_prediction(text):
    result = predict_sentiment(text)
    print(f"Text: \"{text}\"\nPredicted Sentiment: {result}\n")

show_prediction("I love this!")
show_prediction("This is awful")
show_prediction("you like it")

import pandas as pd
import networkx as nx

edges = pd.read_csv('edges.csv')
nodes = pd.read_csv('nodes.csv')
labels = pd.read_csv('labels.csv')

edges.head(), nodes.head(), labels.head()

data = pd.merge(nodes, labels, on='user_id')

data.head()

graph = nx.Graph()
graph.add_nodes_from(data['user_id'])
graph.add_edges_from(edges.values)

import matplotlib.pyplot as plt

nx.draw(graph.subgraph(data['user_id'][:200]),
        node_color=data['label'][:200].map({1:'green', 0:'red'}),
        node_size=20)

# sentence -> tokenize -> sequnece -> padding -> embedding -> training

from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import Tokenizer

tokenizer = Tokenizer(num_words=2000, oov_token='<OOV>')

tokenizer.fit_on_texts(data['text']) # tokenize

tokenize_text = tokenizer.texts_to_sequences(data['text']) # sequencing

padded_text = pad_sequences(tokenize_text, maxlen=15) # padding

padded_text[:5]

X = padded_text
y = data['label']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

X.shape, y.shape

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, SimpleRNN, Embedding

model = Sequential(
    [
        Embedding(2000, output_dim = 32),
        SimpleRNN(32),
        Dense(1,activation='sigmoid')
    ]
)

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics = ['accuracy'])


model.fit(X_train,y_train,epochs=5)

model.evaluate(X_test, y_test)

y_pred = model.predict(X_test)

y_pred[:5]